datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Employee
  TeamLeader
  Admin
  Client
}

enum Status {
  Pending
  Completed
}

enum ProjectStatus {
  active
  onTrack
  atRisk
  delayed
  onHold
  cancelled
}

model User {
  id            String          @id @default(cuid())
  employeeId    String?         @unique
  email         String          @unique
  name          String
  password      String
  role          Role            @default(Employee)
  workingAs     String?
  department    String?
  phone         String?
  bio           String?
  image         String?
  dob           String?
  groupId       String?
  isLogin       Boolean         @default(false)
  Groups        Group?          @relation("UserGroup", fields: [groupId], references: [id])
  isTeamLeader  Projects?       @relation("teamLeader")
  Announcements Announcements[] @relation("Announcements")
  Message       Message[]       @relation("Message")
  WorkAssigned  Work[]          @relation("Work")
  Projects      Projects[]      @relation("Projects")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Announcements {
  id        String @id @default(cuid())
  message   String
  msgBy     String
  messageBy User   @relation("Announcements", fields: [msgBy], references: [id])
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  userId      String?
  members     User[]    @relation("UserGroup")
  message     Message[] @relation("Group")
  createdAt   DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  message   String
  userId    String
  groupId   String?
  sender    User     @relation("Message", fields: [userId], references: [id])
  group     Group?   @relation("Group", fields: [groupId], references: [id])
  createdAt DateTime @default(now())
}

model Docs {
  id         String     @id @default(cuid())
  title      String
  fileUrl    String
  createdAt  DateTime   @default(now())
  projectId  String
  Project    Projects?  @relation("Project", fields: [projectId], references: [id])
}


model Projects {
  id               String   @id @default(nanoid())
  name             String
  description      String
  budget           Int
  startDate        DateTime
  endDate          DateTime
  teamLeader       User     @relation("teamLeader", fields: [teamLeaderId], references: [id])
  teamLeaderId     String   @unique
  department       String
  priority         String
  Document         Docs[]   @relation("Project")
  progress         Int      @default(0)
  status           String   @default("active")
  assignedEmployee User[]   @relation("Projects")
  WorkAssign       Work[]   @relation("ProjectWork")
  createdAt        DateTime @default(now())
}

model Work {
  id          String     @id @default(cuid())
  userId      String
  subject     String
  projectName String
  description String
  status      Status     @default(Pending)
  deadline    DateTime
  assignedBy  String
  assignedTo  User       @relation("Work", fields: [userId], references: [id])
  Project     Projects[] @relation("ProjectWork")
  createdAt   DateTime   @default(now())
}
